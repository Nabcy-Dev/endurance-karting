const io = require('socket.io-client');

console.log('üß™ Test de la collaboration en temps r√©el...\n');

// Test 1: Connexion au serveur
console.log('1Ô∏è‚É£ Test de connexion...');
const socket = io('http://localhost:5000');

socket.on('connect', () => {
  console.log('‚úÖ Connect√© au serveur Socket.IO');
  console.log(`   Socket ID: ${socket.id}`);
  
  // Test 2: Rejoindre une course
  console.log('\n2Ô∏è‚É£ Test de rejoindre une course...');
  const testRaceId = 'test-race-123';
  socket.emit('join-race', testRaceId);
  
  // Test 3: √âmettre un √©v√©nement de test
  console.log('\n3Ô∏è‚É£ Test d\'√©mission d\'√©v√©nement...');
  socket.emit('race-started', {
    raceId: testRaceId,
    startTime: new Date().toISOString(),
    timestamp: Date.now()
  });
  
  // Test 4: √âcouter les √©v√©nements
  console.log('\n4Ô∏è‚É£ Test d\'√©coute d\'√©v√©nements...');
  socket.on('race-started', (data) => {
    console.log('‚úÖ √âv√©nement re√ßu:', data);
  });
  
  // Test 5: D√©connexion
  setTimeout(() => {
    console.log('\n5Ô∏è‚É£ Test de d√©connexion...');
    socket.disconnect();
    console.log('‚úÖ D√©connect√© du serveur');
    console.log('\nüéâ Tous les tests sont pass√©s !');
    process.exit(0);
  }, 2000);
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Erreur de connexion:', error.message);
  console.log('\nüí° V√©rifiez que le serveur est d√©marr√© sur le port 5000');
  process.exit(1);
});

socket.on('disconnect', () => {
  console.log('üîå D√©connect√© du serveur');
});

// Timeout de s√©curit√©
setTimeout(() => {
  console.error('‚è∞ Timeout - Le serveur ne r√©pond pas');
  process.exit(1);
}, 10000);
